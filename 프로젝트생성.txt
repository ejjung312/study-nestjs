1. nest cli 설치
npm i -g @nestjs/cli

2. nest 프로젝트 설치
nest new project-name

3. nest 버전 확인
nest --version

4. 서비스 실행
npm run start:dev

========================================

uuid 설치

========================================

서비스 흐름
Request -> Controller -> Service -> Response

========================================

- 모듈
  - @Module () 데코레이터로 주석이 달린 클래스
  - @Module () 데코레이터는 Nest가 애플리케이션 구조를 구성하는 데 사용하는 메타 데이터를 제공
  - 각 응용 프로그램에는 하나 이상의 모듈 (루트 모듈)을 가짐
  - 루트 모듈은 Nest가 사용하는 시작점

  - 밀접하게 관련된 기능 집합으로 구성 요소를 구성 (기능별로 만듬)
  - 같은 기능에 해당하는 것들은 하나의 모듈 폴더안에 넣어서 사용
    (UserController, UserService, UserEntity 를 UserModule에 넣음)
  - 기본적으로 싱글 톤이므로 여러 모듈간에 쉽게 공급자의 동일한 인스턴스를 공유 할 수 있음

  - 모듈 생성 명령어
    nest g module boards

- 컨트롤러
  - 들어오는 요청을 처리하고 클라이언트에 응답을 반환
  - Handler
    - @Get, @Post, @Delete 등과 같은 데코레이터로 장식된 컨트롤러 클래스 내의 단순한 메서드
  - 컨트롤러 생성 명령어
    nest g controller boards --no-spec
    --no-spec : 테스트를 위한 소스 코드 생성 X

  - 컨트롤러 생성 순서
    1. boards 폴더 찾기
    2. boards/안 controller 파일 생성
    3. boards/안 module 파일 찾기
    4. module안에 controller 넣어주기

- 프로바이더
  - 어떤 컴포넌트가 필요하며 의존성을 주입당하는 객체 => 프로바이더
  - nest 프레임워크 내부에서 알아서 컨테이너를 만들어서 관리해줌
  - 컨트롤러는 HTTP 요청을 처리하고 보다 복잡한 일을 프로바이더에 위임함

- 서비스
  - @Injectable 데코레이터로 감싸져서 모듈에 제공되며, 다른 컴포넌트에서 이 서비스를 사용 할 수있게(Injectable) 만들어줌
  - 서비스는 컨트롤러에서 데이터의 유효성 체크를 하거나 데이터베이스에 아이템을 생성하는 작업 처리

  - 서비스 생성 명령어
    nest g service boards --no-spec